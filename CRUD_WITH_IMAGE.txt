public class HomeController : Controller
    {
        PracticeDBEntities dbEntity = new PracticeDBEntities();
        tbl_EmployeeImg Model = new tbl_EmployeeImg();

        // GET: Home
        public ActionResult Index()
        {
            var data = dbEntity.tbl_EmployeeImg.ToList();
            return View(data);
        }

        public ActionResult Create()
        {

            return View();
        }
        [HttpPost]
        public ActionResult Create(tbl_EmployeeImg emp)
        {
            if (ModelState.IsValid == true)
            {
                string fileName = Path.GetFileNameWithoutExtension(emp.ImageFile.FileName);
                string extension = Path.GetExtension(emp.ImageFile.FileName);
                HttpPostedFileBase postedFile = emp.ImageFile;
                int length = postedFile.ContentLength;

                if (extension.ToLower() == ".jpg" || extension.ToLower() == ".jpeg" || extension.ToLower() == ".png")
                {
                    if (length < 1000000)
                    {
                        fileName = fileName + extension;
                        emp.ImagePath = "~/Images/" + fileName;
                        fileName = Path.Combine(Server.MapPath("~/Images/"), fileName);
                        emp.ImageFile.SaveAs(fileName);
                        dbEntity.tbl_EmployeeImg.Add(emp);
                        int x = dbEntity.SaveChanges();
                        if (x > 0)
                        {
                            TempData["InsertMessage"] = "<script>alert('Inserted Success !!')</script>";
                            ModelState.Clear();
                            return RedirectToAction("Index", "Home");
                        }
                        else
                        {
                            TempData["InsertMessage"] = "<script>alert('Insertion Failed !!')</script>";
                        }
                    }
                    else
                    {
                        TempData["LengthError"] = "<script>alert('Image size should be 1MB !!')</script>";
                    }
                }
                else
                {
                    TempData["ExtensionError"] = "<script>alert('Image format is not support !!')</script>";
                }
            }
            return View();
        }

        public ActionResult Edit(int id)
        {
            var data = dbEntity.tbl_EmployeeImg.Where(x => x.Id == id).FirstOrDefault();
            Session["Image"] = data.ImagePath;
            return View(data);
        }
        [HttpPost]
        public ActionResult Edit(tbl_EmployeeImg emp)
        {
            if (ModelState.IsValid == true)
            {
                if (emp.ImageFile != null)
                {
                    string fileName = Path.GetFileNameWithoutExtension(emp.ImageFile.FileName);
                    string extension = Path.GetExtension(emp.ImageFile.FileName);
                    HttpPostedFileBase postedFile = emp.ImageFile;
                    int length = postedFile.ContentLength;

                    if (extension.ToLower() == ".jpg" || extension.ToLower() == ".jpeg" || extension.ToLower() == ".png")
                    {
                        if (length < 1000000)
                        {
                            fileName = fileName + extension;
                            emp.ImagePath = "~/Images/" + fileName;
                            fileName = Path.Combine(Server.MapPath("~/Images/"), fileName);
                            emp.ImageFile.SaveAs(fileName);
                            dbEntity.Entry(emp).State = EntityState.Modified;
                            int x = dbEntity.SaveChanges();
                            if (x > 0)
                            {
                                string path = Request.MapPath(Session["Image"].ToString());
                                if (System.IO.File.Exists(path))
                                {
                                    System.IO.File.Delete(path);
                                }
                                TempData["UpdationMessage"] = "<script>alert('Updated Success !!')</script>";
                                return RedirectToAction("Index", "Home");
                            }
                            else
                            {
                                TempData["UpdationMessage"] = "<script>alert('Updation Failed !!')</script>";
                            }
                        }
                        else
                        {
                            TempData["LengthError"] = "<script>alert('Image size should be 1MB !!')</script>";
                        }
                    }
                    else
                    {
                        TempData["ExtensionError"] = "<script>alert('Image format is not support !!')</script>";
                    }
                }
                else
                {
                    emp.ImagePath = Session["Image"].ToString();
                    dbEntity.Entry(emp).State = EntityState.Modified;
                    int x = dbEntity.SaveChanges();
                    if (x > 0)
                    {
                        TempData["UpdationMessage"] = "<script>alert('Updated Success !!')</script>";
                        return RedirectToAction("Index", "Home");
                    }
                    else
                    {
                        TempData["UpdationMessage"] = "<script>alert('Updation Failed !!')</script>";
                    }
                }
            }
            return View();
        }

        public ActionResult Delete(int id)
        {
            if (id > 0)
            {
                var y = dbEntity.tbl_EmployeeImg.Where(x => x.Id == id).FirstOrDefault();
                if (y != null)
                {
                    dbEntity.Entry(y).State = EntityState.Deleted;
                   int z= dbEntity.SaveChanges();
                    if (z>0)
                    {
                       string path=Request.MapPath(y.ImagePath.ToString());
                        if (System.IO.File.Exists(path))
                        {
                            System.IO.File.Delete(path);
                        }
                        return RedirectToAction("Index","Home");
                    }
                    else
                    {
                        TempData["delteMessage"] = "Not Deleted";
                    }
                }
            }
            return View();
        }
    }


--> VIEWS OF THESE ACTION METHODS

@model IEnumerable<WebApplication1.Models.tbl_EmployeeImg>

@{
    ViewBag.Title = "Index";//INDEX VIEW
}

<h2>Index</h2>
@Html.Raw(TempData["InsertMessage"])
@Html.Raw(TempData["UpdationMessage"])
< p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Designation)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Age)
        </th>
        <th>
            @* @Html.DisplayNameFor(model => model.ImagePath) *@
            Employee Image
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Designation)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            <td>
                @* @Html.DisplayFor(modelItem => item.ImagePath) *@
                <img src="@Url.Content(item.ImagePath)" height="50" width="50" />
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>



@model WebApplication1.Models.tbl_EmployeeImg

@{
    ViewBag.Title = "Create";//CREATE VIEW
}

<h2>Create</h2>
@Html.Raw(TempData["InsertMessage"])
@Html.Raw(TempData["LengthError"])
@Html.Raw(TempData["ExtensionError"])

@using (Html.BeginForm("Create", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>tbl_EmployeeImg</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @* @Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" }) *@
                <input type="file" name="ImageFile" required />   
            </div>
        </div><br />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-info" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>




@model WebApplication1.Models.tbl_EmployeeImg

@{
    ViewBag.Title = "Edit";// EDIT VIEW
}

<h2>Edit</h2>
@Html.Raw(TempData["UpdationMessage"])
@Html.Raw(TempData["LengthError"])
@Html.Raw(TempData["ExtensionError"])

@using (Html.BeginForm("Edit", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>tbl_EmployeeImg</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.ImagePath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })*@
                <img src="@Url.Content(Session["Image"].ToString())" height="50" width="100" /><br />
                <input type="file" name="ImageFile" />
            </div>
        </div><br />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>







@model WebApplication1.Models.tbl_EmployeeImg

@{
    ViewBag.Title = "Delete";//DELETE VIEW
}

<h2>Delete</h2>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>tbl_EmployeeImg</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Designation)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Designation)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Age)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Age)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ImagePath)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ImagePath)
        </dd>

    </dl>

    @using (Html.BeginForm()) {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color">
            <input type="submit" value="Delete" class="btn btn-default" /> |
            @Html.ActionLink("Back to List", "Index")
        </div>
    }
</div>

